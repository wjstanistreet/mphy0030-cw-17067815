function fdg = finite_difference_gradient(a, x)
%  
% finite_difference_gradient calculates the finite difference between
% points in a multivariate function, mvf. 
% 
% --- Inputs ---
% 
% mvf       - Input multivariate function 
% ivv       - Variable vector representing the position
% 
% --- Output ---
% 
% fdg       - Finite difference gradient

% For this coursework, the input multivariate function is equal to
%  洧녭(洧냠)=洧녩1洧논1^2+洧녩2洧논2^2+洧녩3洧논3^2+洧녩4洧논1洧논2+洧녩5洧논1洧논3+洧녩6洧논2洧논3+洧녩7洧논1+洧녩8洧논2+洧녩9洧논3+洧녩0
h = 1E-3;

% The finite difference between the next forward position of each
% dimension from their central position ...
Forx = [x(1)+h, x(2), x(3)];
Fory = [x(1), x(2)+h, x(3)];
Forz = [x(1), x(2), x(3)+h];

% ... and backwards from their central positions.
Bacx = [x(1)-h, x(2), x(3)];
Bacy = [x(1), x(2)-h, x(3)];
Bacz = [x(1), x(2), x(3)-h];

% We can approximate the partial difference in each dimension.
dfdx = (quadratic_polynomial(a,Forx));
dfdy = (quadratic_polynomial(a,Fory));
dfdz = (quadratic_polynomial(a,Forz));

dbdx = (quadratic_polynomial(a,Bacx));
dbdy = (quadratic_polynomial(a,Bacy));
dbdz = (quadratic_polynomial(a,Bacz));


dx = (dfdx-dbdx)/(2*h);
dy = (dfdy-dbdy)/(2*h);
dz = (dfdz-dbdz)/(2*h);

fdg = [dx, dy, dz];

end 
